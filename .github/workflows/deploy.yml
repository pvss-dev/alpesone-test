name: Test, Build, Publish and Deploy

on:
  push:
    branches:
      - main

env:
  IMAGE_TAG: ${{ github.sha }}

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: test_database
          MYSQL_ROOT_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: pdo_mysql, mysql, xml, curl
          tools: composer

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('composer.lock') }}

      - name: Install dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Create test environment file
        run: |
          cp .env.example .env.testing
          echo "APP_ENV=testing" >> .env.testing
          echo "APP_DEBUG=true" >> .env.testing
          echo "DB_CONNECTION=mysql" >> .env.testing
          echo "DB_HOST=127.0.0.1" >> .env.testing
          echo "DB_PORT=3306" >> .env.testing
          echo "DB_DATABASE=test_database" >> .env.testing
          echo "DB_USERNAME=root" >> .env.testing
          echo "DB_PASSWORD=test_password" >> .env.testing

      - name: Generate application key
        run: php artisan key:generate --env=testing

      - name: Run database migrations
        run: php artisan migrate --env=testing --force

      - name: Run database seeders
        run: php artisan db:seed --env=testing --force

      - name: Run PHP tests
        run: php artisan test --env=testing

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/alpesone-test:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/alpesone-test:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Clean workspace
        run: |
          echo "Cleaning workspace permissions..."
          if [ -d "${{ github.workspace }}/.docker/letsencrypt" ]; then
            echo "Fixing Let's Encrypt permissions..."
            sudo chown -R $USER:$USER ${{ github.workspace }}/.docker/letsencrypt || true
            sudo chmod -R 755 ${{ github.workspace }}/.docker/letsencrypt || true
          fi
          sudo chown -R $USER:$USER ${{ github.workspace }} || true
          sudo chmod -R 755 ${{ github.workspace }} || true

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env
        run: |
          cat > .env << EOF
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          IMAGE_TAG=${{ env.IMAGE_TAG }}
          APP_ENV=${{ secrets.APP_ENV }}
          APP_KEY=${{ secrets.APP_KEY }}
          APP_DEBUG=false
          APP_URL=${{ secrets.APP_URL }}
          LOG_CHANNEL=stack
          LOG_LEVEL=debug
          DB_CONNECTION=mysql
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=3306
          DB_DATABASE=${{ secrets.DB_DATABASE }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
          EOF

      - name: Deploy
        run: |
          docker compose pull
          docker compose up -d --remove-orphans

      - name: Wait for application to be healthy
        run: |
          echo "Waiting for application to become healthy..."
          timeout 60s bash -c 'until docker compose exec -T app php artisan tinker --execute="echo \"OK\"" 2>/dev/null; do sleep 2; done' || true

      - name: Run post-deploy commands
        run: |
          docker compose exec -T app php artisan config:clear
          docker compose exec -T app php artisan config:cache
          docker compose exec -T app php artisan route:cache
          docker compose exec -T app php artisan migrate --force
          docker compose exec -T app php artisan db:seed --force
          docker compose exec -T app php artisan l5-swagger:generate
